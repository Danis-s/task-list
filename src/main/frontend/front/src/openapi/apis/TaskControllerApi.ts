/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PageTask,
    PageTaskFromJSON,
    PageTaskToJSON,
    Task,
    TaskFromJSON,
    TaskToJSON,
    TaskSo,
    TaskSoFromJSON,
    TaskSoToJSON,
} from '../models';

export interface ChangeStatusRequest {
    id: number;
    taskStatus: ChangeStatusTaskStatusEnum;
}

export interface CreateTaskRequest {
    taskSo: TaskSo;
}

export interface DeleteTaskRequest {
    id: number;
}

export interface EditTaskRequest {
    id: number;
    taskSo: TaskSo;
}

export interface GetAllTaskRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetTaskByIdRequest {
    id: number;
}

/**
 * 
 */
export class TaskControllerApi extends runtime.BaseAPI {

    /**
     */
    async changeStatusRaw(requestParameters: ChangeStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling changeStatus.');
        }

        if (requestParameters.taskStatus === null || requestParameters.taskStatus === undefined) {
            throw new runtime.RequiredError('taskStatus','Required parameter requestParameters.taskStatus was null or undefined when calling changeStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.taskStatus !== undefined) {
            queryParameters['taskStatus'] = requestParameters.taskStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/task-status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     */
    async changeStatus(id: number, taskStatus: ChangeStatusTaskStatusEnum, initOverrides?: RequestInit): Promise<Task> {
        const response = await this.changeStatusRaw({ id: id, taskStatus: taskStatus }, initOverrides);
        return await response.value();
    }

    /**
     */
    async createTaskRaw(requestParameters: CreateTaskRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TaskSo>> {
        if (requestParameters.taskSo === null || requestParameters.taskSo === undefined) {
            throw new runtime.RequiredError('taskSo','Required parameter requestParameters.taskSo was null or undefined when calling createTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/create-task`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskSoToJSON(requestParameters.taskSo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskSoFromJSON(jsonValue));
    }

    /**
     */
    async createTask(taskSo: TaskSo, initOverrides?: RequestInit): Promise<TaskSo> {
        const response = await this.createTaskRaw({ taskSo: taskSo }, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTaskRaw(requestParameters: DeleteTaskRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTask(id: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteTaskRaw({ id: id }, initOverrides);
    }

    /**
     */
    async editTaskRaw(requestParameters: EditTaskRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TaskSo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editTask.');
        }

        if (requestParameters.taskSo === null || requestParameters.taskSo === undefined) {
            throw new runtime.RequiredError('taskSo','Required parameter requestParameters.taskSo was null or undefined when calling editTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskSoToJSON(requestParameters.taskSo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskSoFromJSON(jsonValue));
    }

    /**
     */
    async editTask(id: number, taskSo: TaskSo, initOverrides?: RequestInit): Promise<TaskSo> {
        const response = await this.editTaskRaw({ id: id, taskSo: taskSo }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllTaskRaw(requestParameters: GetAllTaskRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PageTask>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/task`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageTaskFromJSON(jsonValue));
    }

    /**
     */
    async getAllTask(page?: number, size?: number, sort?: Array<string>, initOverrides?: RequestInit): Promise<PageTask> {
        const response = await this.getAllTaskRaw({ page: page, size: size, sort: sort }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTaskByIdRaw(requestParameters: GetTaskByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTaskById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     */
    async getTaskById(id: number, initOverrides?: RequestInit): Promise<Task> {
        const response = await this.getTaskByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ChangeStatusTaskStatusEnum {
    Created = 'CREATED',
    Process = 'PROCESS',
    Finished = 'FINISHED'
}
